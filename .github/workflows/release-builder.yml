name: Release builder

on:
  push:
    branches:
      - master

  workflow_dispatch:
    inputs:
      release:
        description: Next release
        default: patch
        options: [major, minor, patch]
        type: choice
      force_publish:
        description: Force publish
        type: boolean
      force_pr:
        description: Force pull request
        type: boolean

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  detect_release:
    name: Detect release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - id: tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          tag-annotation-template: |
            chore(release): {VERSION}
          version-command: |
            cat worf/__init__.py | cut -d = -f 2 | xargs | cut -d v -f 2

    outputs:
      created_tag: ${{ steps.tag.outputs.tag }}
      current_version: ${{ steps.tag.outputs.current-version }}
      previous_version: ${{ steps.tag.outputs.previous-version }}

  publish_release:
    if: inputs.force_publish || needs.detect_release.outputs.created_tag
    name: Publish release
    runs-on: ubuntu-latest
    needs: detect_release

    env:
      GITHUB_TOKEN: ${{ github.token }}
      PROJECT_NAME: worf
      PROJECT_TYPE: package
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_SIX_BOT_TOKEN }}
      TARGET_NAME: pypi.org
      TARGET_URL: https://pypi.org/project/worf/

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4

      - run: pip install requests

      - id: build_images_message
        run: echo "message=$(python .github/workflows/release_message.py)" >> $GITHUB_OUTPUT
        env:
          MESSAGE_TEMPLATE: images

      - if: steps.build_images_message.outputs.message
        id: send_images_message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: C0306G288J0
          payload: ${{ steps.build_images_message.outputs.message }}

      - id: build_release_message
        run: echo "message=$(python .github/workflows/release_message.py)" >> $GITHUB_OUTPUT

      - id: send_release_message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: C0306G288J0
          payload: ${{ steps.build_release_message.outputs.message }}

      - run: script/build

      - run: script/start

      - id: build
        run: script/package --build

      - run: script/package --dry-run
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}

      - id: release
        run: script/package --release
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - if: always()
        id: rebuild_release_message
        run: echo "message=$(python .github/workflows/release_message.py)" >> $GITHUB_OUTPUT
        env:
          DEPLOY_STATUS: ${{ steps.release.conclusion }}

      - if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: C0306G288J0
          payload: ${{ steps.rebuild_release_message.outputs.message }}
          update-ts: ${{ steps.send_release_message.outputs.ts }}

  build_changelog:
    if: always() && needs.publish_release.result != 'failure'
    name: Build changelog
    runs-on: ubuntu-latest
    needs: publish_release

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4

      - run: pip install semver

      - id: builder
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: .github/workflows/changelog-builder.json
          outputFile: NEXT.md
          toTag: HEAD

      - id: process
        run: |
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          cat NEXT.md | python .github/workflows/process_changelog.py >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - id: next
        run: |
          echo "version=$(python .github/workflows/next_version.py ${{ steps.builder.outputs.fromTag }} ${{ inputs.release || 'patch' }})" >> $GITHUB_OUTPUT

    outputs:
      has_prs: ${{ steps.builder.outputs.categorized_prs || steps.builder.outputs.uncategorized_prs }}
      previous_version: ${{ steps.builder.outputs.fromTag }}
      next_version: ${{ steps.next.outputs.version }}
      notes: ${{ steps.process.outputs.changelog }}
      release: ${{ inputs.release || 'patch' }}

  create_pr:
    if: always() && inputs.force_pr || needs.build_changelog.outputs.has_prs
    name: Create pull request
    runs-on: ubuntu-latest
    needs: build_changelog

    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - id: commit
        uses: pr-mpt/actions-commit-hash@v1

      - run: |
          echo -e "# Changelog\n" > NEXT.md
          echo -e "All notable changes to this project will be documented in this file. See [standard-version](${{ github.server_url }}/conventional-changelog/standard-version) for commit guidelines.\n" >> NEXT.md
          echo -e "${{ needs.build_changelog.outputs.release == 'patch' && '###' || '##' }} [${{ needs.build_changelog.outputs.next_version }}](${{ github.server_url }}/${{ github.repository }}/compare/${{ needs.build_changelog.outputs.previous_version }}...v${{ needs.build_changelog.outputs.next_version }}) ($(date +'%Y-%m-%d'))\n" >> NEXT.md
          echo -e "${{ needs.build_changelog.outputs.notes }}\n" >> NEXT.md
          cat CHANGELOG.md | sed -e '1,4d' >> NEXT.md && mv NEXT.md CHANGELOG.md
          echo '__version__ = "v${{ needs.build_changelog.outputs.next_version }}"' > worf/__init__.py

      - uses: peter-evans/create-pull-request@v4
        with:
          title: Release ${{ needs.build_changelog.outputs.next_version }}
          body: |
            ## Release [${{ needs.build_changelog.outputs.next_version }}](${{ github.server_url }}/${{ github.repository }}/compare/${{ needs.build_changelog.outputs.previous_version }}...${{ steps.commit.outputs.short }})

            ${{ needs.build_changelog.outputs.notes }}

            <details>
              <summary>View source</summary>
              <pre><code>${{ needs.build_changelog.outputs.notes }}</code></pre>
            </details>
          author: GitHub <noreply@github.com>
          base: master
          branch: release
          committer: GitHub <noreply@github.com>
          commit-message: |
            chore(release): ${{ needs.build_changelog.outputs.next_version }}
          delete-branch: true
